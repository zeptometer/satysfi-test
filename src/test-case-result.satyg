module TestCaseResultStatus : sig

  type t

  val success : t
  val fail : t
  val cases : (| success : unit -> 'a; fail : unit -> 'a |) -> t -> 'a
  val eq : t -> t -> bool

end = struct

  type s = Success | Fail
  type t = s

  let success = Success

  let fail = Fail

  let cases branches status =
    match status with
    | Success -> branches#success ()
    | Fail -> branches#fail ()

  let eq a b =
    match a with
    | Success -> (
      match b with
      | Success -> true
      | Fail -> false)
    | Fail -> (
      match b with
      | Success -> false
      | Fail -> true)

end

module TestCaseResult : sig

  type t

  val of-test : (|
    description : string;
    status : TestCaseResultStatus.t;
  |) -> t

  val of-describe : (|
    description : string;
    results : t list;
  |) -> t

  val cases : (|
    test : (| description : string; status : TestCaseResultStatus.t |) -> 'a;
    describe : (| description : string; results : t list |) -> 'a;
  |) -> t -> 'a

  val eq : t -> t -> bool

end = struct

  type s =
  | TEST of (|
    description : string;
    status : TestCaseResultStatus.t
  |)
  | DESCRIBE of (|
    description : string;
    results : s list;
  |)
  type t = s

  let of-test result = TEST(result)
  let of-describe result = DESCRIBE(result)

  let cases branches result =
    match result with
    | TEST test-result -> branches#test test-result
    | DESCRIBE describe-result -> branches#describe describe-result

  let-rec same-results a b =
    match a with
    | [] -> (match b with
      | [] -> true
      | _ -> false)
    | x :: xs -> (match b with
      | [] -> false
      | y :: ys -> (
        if eq x y then
          same-results xs ys
        else
          false
      ))

  and eq a b = a |> cases (|
    test = (fun (a-test) -> (
      b |> cases (|
        test = (fun (b-test) -> (
          string-same a-test#description b-test#description
          && (TestCaseResultStatus.eq a-test#status b-test#status)
        ));
        describe = (fun _ -> false)
      |)
    ));
    describe = (fun (a-describe) -> (
      b |> cases (|
        test = (fun _ -> false);
        describe = (fun (b-describe) -> (
          string-same a-describe#description b-describe#description
          && same-results a-describe#results b-describe#results
        ))
      |)
    ));
  |)

end
