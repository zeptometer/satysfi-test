@require: list

@import: expect
@import: test-case-result
@import: test-run-result

module TestCase : sig

  type t

  val test : string -> (unit -> ExpectResult.t) -> t
  val describe : string -> t list -> t
  val run : t -> TestRunResult.t

end = struct

  type s = (| description : string; test-runner : unit -> TestRunResult.t |)
  type t = s

  let test description test-body =
    let test-runner () =
      let result = test-body () in
      if result |> ExpectResult.is-pass then
        let case-result = TestCaseResult.of-test (|
          description = description;
          status = TestCaseResultStatus.success;
        |) in
        TestRunResult.make (|
          run = 1;
          success = 1;
          detail = case-result
        |)
      else
        let case-result = TestCaseResult.of-test (|
          description = description;
          status = TestCaseResultStatus.fail;
        |) in
        TestRunResult.make (|
          run = 1;
          success = 0;
          detail = case-result;
        |) in
    (|
      description = description;
      test-runner = test-runner;
    |)

  let run test-case = test-case#test-runner ()

  let describe description test-cases =
    let concat-results results =
      let run = results |> List.map TestRunResult.count-run
        |> List.fold-left (+) 0 in
      let success = results |> List.map TestRunResult.count-success
        |> List.fold-left (+) 0 in
      let detail = TestCaseResult.of-describe (|
          description = description;
          results = results |> List.map TestRunResult.get-detail
        |) in
      TestRunResult.make (|
        run = run;
        success = success;
        detail = detail
      |)
    in
    let test-runner () =
      test-cases
      |> List.map run
      |> concat-results in
    (|
      description = description;
      test-runner = test-runner;
    |)

end
