@import: spy
@import: test-case

% Todo
% x call test method
% x multiple tests
% count test runs
% count failure results

let assert b = if b then () else abort-with-message `Assertion failed` in

open TestCase in
let () = describe `satysfi-test` [
  test `test calls test body` (fun () -> (
    let spy = Spy.make () in
    let () = not (spy |> Spy.was-run) |> assert in
    let () = test `Mock test case` (spy |> Spy.get-spy)
      |> run in
    spy |> Spy.was-run |> assert
  ));

  test `describe calls all test cases` (fun () -> (
    let (spy1, spy2) = (Spy.make (), Spy.make ()) in
    let () = describe `Multiple test cases` [
      test `Test case 1` (spy1 |> Spy.get-spy);
      test `Test case 2` (spy2 |> Spy.get-spy);
    ] |> run in
    ((spy1 |> Spy.was-run) && (spy2 |> Spy.was-run)) |> assert
  ));
] |> run in

`Following "The xUnit example" of "Test-Driven Development"`
