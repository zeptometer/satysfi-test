@import: spy
@import: test-case
@import: test-result

% Todo
% x call test method
% x multiple tests
% count test runs
% count failure results

let assert b = if b then TestResult.pass else  TestResult.fail in

open TestCase in
let _ = describe `satysfi-test` [
  test `test calls test body` (fun () -> (
    let spy = Spy.make () in
    let was-run-prev = spy |> Spy.was-run in
    let _ = test `Mock test case` (spy |> Spy.get-spy)
      |> run in
    (not was-run-prev && (spy |> Spy.was-run)) |> assert
  ));

  test `describe calls all test cases` (fun () -> (
    let (spy1, spy2) = (Spy.make (), Spy.make ()) in
    let _ = describe `Multiple test cases` [
      test `Test case 1` (spy1 |> Spy.get-spy);
      describe `Nested describe` [
        test `Test case 2` (spy2 |> Spy.get-spy);
      ]
    ] |> run in
    ((spy1 |> Spy.was-run) && (spy2 |> Spy.was-run)) |> assert
  ));

  test `Test result of single test case` (fun () -> (
    let result = test `Mock test case` (fun () -> (
      TestResult.pass
    )) |> run in
    assert (result |> TestResult.is-pass)
  ));

  % test `Aborts when test fails` (fun () -> (
  %   TestResult.fail
  % ))

  % describe `Expect` [
  %   test `always-pass` (fun () -> (
  %     Expect.always-pass |>
  %     TestResult.pass
  %   ));
  %   test `true passes when true is passed` (fun () -> (
  %     true |> Expect.true
  %   ));
  %   % test `true fails when false is passed` (fun () -> (
  %   %   false |> Expect.true
  %   % ))
  % ]
] |> run in

`Following "The xUnit example" of "Test-Driven Development"`
