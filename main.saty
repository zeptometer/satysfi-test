@import: expect
@import: spy
@import: test-case
@import: test-result
@import: test-suite-result

% Todo
% x call test method
% x multiple tests
% count test runs
% count failure results

open TestCase in
let _ = describe `satysfi-test` [
  describe `Spy` [
    test `was-run is false initially` (fun () -> (
      let spy = Spy.make () in
      spy |> Spy.was-run |> Expect.is-false
    ));
    test `was-run is true when test-fun is called` (fun () -> (
      let spy = Spy.make () in
      let _ = (spy |> Spy.get-spy) () in
      spy |> Spy.was-run |> Expect.is-true
    ))
  ];

  describe `TestCase` [
    test `test calls test body` (fun () -> (
      let spy = Spy.make () in
      let was-run-prev = spy |> Spy.was-run in
      let _ = test `Mock test case` (spy |> Spy.get-spy)
        |> run in
      (not was-run-prev && (spy |> Spy.was-run))
      |> Expect.is-true
    ));

    test `describe calls all test cases` (fun () -> (
      let (spy1, spy2) = (Spy.make (), Spy.make ()) in
      let _ = describe `Multiple test cases` [
        test `Test case 1` (spy1 |> Spy.get-spy);
        describe `Nested describe` [
          test `Test case 2` (spy2 |> Spy.get-spy);
        ]
      ] |> run in
      ((spy1 |> Spy.was-run) && (spy2 |> Spy.was-run))
      |> Expect.is-true
    ));
  ];

  describe `TestSuiteResult` [
    test `1 run with single successful TestCase` (fun () -> (
      let result = test `Mock test case` (fun () -> (
        TestResult.pass
      )) |> run in
      (result |> TestSuiteResult.count-run) == 1
      && (result |> TestSuiteResult.count-success) == 1
      |> Expect.is-true
    ));
  ];

  % test `Aborts when test fails` (fun () -> (
  %   Expect.always-fail
  % ));

  let assert b = if b then TestResult.pass else  TestResult.fail in
  describe `Expect` [
    test `always-pass` (fun () -> (
      Expect.always-pass |> TestResult.is-pass |> assert
    ));
    test `true passes when true is passed` (fun () -> (
      Expect.is-true true |> TestResult.is-pass |> assert
    ));
    test `true fails when false is passed` (fun () -> (
      Expect.is-true false |> TestResult.is-pass |> (not) |> assert
    ));
    test `false passes when false is passed` (fun () -> (
      Expect.is-false false |> TestResult.is-pass |> assert
    ));
    test `false fails when true is passed` (fun () -> (
      Expect.is-false false |> TestResult.is-pass |> assert
    ));
  ]
] |> run in

`Following "The xUnit example" of "Test-Driven Development"`
