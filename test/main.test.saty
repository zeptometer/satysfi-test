@import: lib/spy
@import: ../src/test

@import: integration.test
@import: test-case.test
@import: test-report-maker.test

% Todo
% x call test method
% x multiple tests
% x count test runs
% x count failure results
% aggregate which test ran and failed
% toplevel function for convert TestRunResult to readble output

open Test in
describe `satysfi-test` [
  describe `Spy` [
    it `was-run is false initially` (fun () -> (
      let spy = Spy.make () in
      spy |> Spy.was-run |> Expect.is-false
    ));

    it `was-run is true when test-fun is called` (fun () -> (
      let spy = Spy.make () in
      let _ = (spy |> Spy.get-spy) () in
      spy |> Spy.was-run |> Expect.is-true
    ));
  ];

  describe `Test` [
    it `test calls test body` (fun () -> (
      let spy = Spy.make () in
      let _ = test `Mock test case` (spy |> Spy.get-spy) |> run in
      spy |> Spy.was-run |> Expect.is-true
    ));

    it `describe calls all test cases` (fun () -> (
      let (spy1, spy2) = (Spy.make (), Spy.make ()) in
      let _ = describe `Multiple test cases` [
        it `Test case 1` (spy1 |> Spy.get-spy);
        describe `Nested describe` [
          it `Test case 2` (spy2 |> Spy.get-spy);
        ]
      ] |> run in
      ((spy1 |> Spy.was-run) && (spy2 |> Spy.was-run))
      |> Expect.is-true
    ));
  ];

  %% Uncomment following lines to have a failing test case
  % test `Test can fail` (fun () -> (
  %   Expect.always-fail
  % ));

  % We cannot use Expect because it's the very test subject!
  let assert b = if b then ExpectResult.pass else  ExpectResult.fail in
  describe `Expect` [
    it `always-pass` (fun () -> (
      Expect.always-pass|> ExpectResult.is-pass |> assert
    ));

    it `always-fail` (fun () -> (
      Expect.always-fail |> ExpectResult.is-pass |> (not) |> assert
    ));

    it `true passes when true given` (fun () -> (
      Expect.is-true true |> ExpectResult.is-pass |> assert
    ));

    it `true fails when false given` (fun () -> (
      Expect.is-true false |> ExpectResult.is-pass |> (not) |> assert
    ));

    it `false passes when false given` (fun () -> (
      Expect.is-false false |> ExpectResult.is-pass |> assert
    ));

    it `false fails when true given` (fun () -> (
      Expect.is-false true |> ExpectResult.is-pass |> (not) |> assert
    ));
  ];

  test-case-tests;
  test-report-maker-tests;

  integration-tests;
] |> Test.run
