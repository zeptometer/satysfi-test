@require: list

module TestCase : sig

  type t

  val describe : string -> t list -> t
  val test : string -> (unit -> unit) -> t
  val run : t -> unit

end = struct

  type s = (| name : string; test-body : unit -> unit |)
  type t = s

  let test name fn = (| name = name; test-body = fn |)

  let run test-case = test-case#test-body ()

  let describe name test-cases = test name (fun () ->
    test-cases |> List.iter run)

end
