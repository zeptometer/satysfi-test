@require: list

@import: test-result

module TestCase : sig

  type t

  val describe : string -> t list -> t
  val test : string -> (unit -> TestResult.t) -> t
  val run : t -> TestResult.t

end = struct

  type s = (| name : string; test-body : unit -> TestResult.t |)
  type t = s

  let test name fn = (| name = name; test-body = fn |)

  let run test-case =
    let result = test-case#test-body () in
    if result |> TestResult.is-pass then
      result
    else
      abort-with-message `Test failed!`


  let describe name test-cases = test name (fun () -> (
    let _ = test-cases |> List.map run in
    TestResult.pass))

end
