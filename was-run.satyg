module WasRun: sig

  type t

  val make : (| wasRun: bool ref; testFun: unit -> unit |) -> t

  val run : t -> unit
  val wasRun : t -> bool

end = struct

  type s = (| wasRun: bool ref; testFun: unit -> unit |)
  type t = s

  let make x = x

  let run x = x#testFun ()
  let wasRun x = !x#wasRun

end

module TestCase : sig

  type t

  val make : WasRun.t -> t
  val run: t -> unit

end = struct

  type s = WasRun.t
  type t = s

  let make wasRun = wasRun

  let run test = test |> WasRun.run

end
