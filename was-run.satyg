module TestCase : sig

  type t

  val make : (| set-up : unit -> unit; test-fun : unit -> unit |) -> t
  val run: t -> unit
  val set-up: t -> unit

end = struct

  type s = (| set-up : unit -> unit; test-fun : unit -> unit |)
  type t = s

  let make x = x

  let set-up test = test#set-up ()

  let run test = let () = test#set-up () in
    test#test-fun ()

end

module WasRun: sig

  type t

  val make : unit -> t * TestCase.t

  val was-run : t -> bool
  val was-set-up : t -> bool

end = struct

  type s = (| was-set-up: bool ref; was-run: bool ref |)
  type t = s

  let make x =
    let-mutable r <- false in
    let-mutable p <- false in
    let set-up = fun() -> (p <- true) in
    let test-fun = fun () -> (r <- true) in
  (
    (| was-set-up = p; was-run = r|),
    TestCase.make (| set-up = set-up; test-fun = test-fun |)
  )

  let was-run x = !x#was-run
  let was-set-up x = !x#was-set-up

end
