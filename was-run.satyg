module TestCase : sig

  type t

  val make : (unit -> unit) -> t
  val run: t -> unit

end = struct

  type s = unit -> unit
  type t = s

  let make testFun = testFun

  let run test = test ()

end

module WasRun: sig

  type t

  val make : (| wasRun: bool ref; testFun: unit -> unit |) -> t * TestCase.t

  val was-run : t -> bool

end = struct

  type s = bool ref
  type t = s

  let make x = (x#wasRun, TestCase.make x#testFun)

  let was-run x = !x

end
